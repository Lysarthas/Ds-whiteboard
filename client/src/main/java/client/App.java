/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package client;

import java.util.Iterator;

import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.MissingArgumentException;
import org.apache.commons.cli.MissingOptionException;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.UnrecognizedOptionException;

public class App {
    private static int DEFAULT_PORT = 8888;

    private static int port = DEFAULT_PORT;
    private static String ip;
    private static String username;
    
    public static void main(String[] args) {
        final Options options = getOptions();
        CommandLine cmdLine;
        try {
            cmdLine = new DefaultParser().parse(options, args);
            port = getIntValue(cmdLine, 'p', DEFAULT_PORT);
            ip = getValue(cmdLine, 's', null);
            username = getValue(cmdLine, 'n', null);
        } catch (ParseException e) {
            handleParseException(e, options);
            return;
        }

        if (cmdLine.hasOption('h')) {
            displayUsage(options);
            System.exit(0);
            return;
        }
    }

    @SuppressWarnings("static-access")
    private static Options getOptions() {
        final Options options = new Options();
        options.addOption(Option.builder("p")
                .longOpt("port")
                .desc(String.format("port to listen (default: %d)", DEFAULT_PORT))
                .hasArg()
                .required(true)
                .argName("PORT")
                .type(Number.class)
                .build());
        
        options.addOption(Option.builder("s")
                .longOpt("server")
                .desc("host of the server")
                .required(true)
                .hasArg()
                .argName("HOST")
                .build());

        options.addOption(Option.builder("n")
                .longOpt("name")
                .desc("username")
                .required(true)
                .hasArg()
                .argName("USERNAME")
                .build());
        
        options.addOption(Option.builder("h")
                .longOpt("help")
                .desc("display help")
                .build());
        return options;
    }

    private static void handleParseException(ParseException e, Options options) {
        if (e instanceof MissingOptionException) {
            StringBuilder sb = new StringBuilder();
            Iterator<String> missingOptions = ((MissingOptionException) e).getMissingOptions().iterator();
            while (missingOptions.hasNext()) {
                sb.append(missingOptions.next());
                if (missingOptions.hasNext()) {
                    sb.append(", ");
                }
            }
            System.out.println(String.format("Missing required option(s) %s.", sb.toString()));
        } else if (e instanceof MissingArgumentException) {
            System.out.println(String.format("%s is missing a required argument.",
            ((MissingArgumentException) e).getOption()));
        } else if (e instanceof UnrecognizedOptionException) {
            System.out.println(String.format("%s is not a valid option.",
            ((UnrecognizedOptionException) e).getOption()));
        } else {
            //pass
        }
        displayUsage(options);
        System.exit(-1);
    }

    private static int getIntValue(CommandLine cmdLine, char option, int defaultValue) throws ParseException {
        if (cmdLine.hasOption(option)) {
            return ((Number) cmdLine.getParsedOptionValue(String.valueOf(option))).intValue();
        } else {
            return defaultValue;
        }
    }

    private static String getValue(CommandLine cmdLine, char option, String defaultValue) throws ParseException {
        if (cmdLine.hasOption(option)) {
            return cmdLine.getOptionValue(String.valueOf(option));
        } else {
            return defaultValue;
        }
    }

    private static void displayUsage(Options options) {
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp("java -jar jhttp*.jar", "Starts a white board client", options, null, true);
    }
}
