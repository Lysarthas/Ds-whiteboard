/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/tutorial_java_projects.html
 */
import org.gradle.plugins.ide.eclipse.model.AccessRule 

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    compileOnly 'org.projectlombok:lombok:1.18.8'
	annotationProcessor 'org.projectlombok:lombok:1.18.8'
    
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

apply plugin: 'eclipse'
eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javafx/**'))
                jre.accessRules.add(new AccessRule('0', 'com/sun/javafx/**'))
            }
        }
    }
}

// Define the main class for the application
mainClassName = 'manager.App'

apply plugin: 'application'

applicationDefaultJvmArgs = ["-Djava.security.manager", "-Djava.security.policy=" + file("$projectDir/mysecurity.policy").absolutePath]

task myRun(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = 'manager.App'
  systemProperties 'java.security.policy': file("$projectDir/mysecurity.policy").absolutePath
}

sourceSets {
  main {
    resources {
        srcDirs = ["src/main/java"]
        includes = ["**/*.fxml"]
    }
  }
}

task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        'Main-Class': 'manager.App'
    }
    baseName = "manager"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}